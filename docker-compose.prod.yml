version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: servicehub_postgres_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-servicehub}
      POSTGRES_USER: ${DB_USER:-servicehub}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-servicehub}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - servicehub_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: servicehub_redis_prod
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - servicehub_network

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: servicehub_backend_prod
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py createsuperuser --noinput --username admin --email admin@servicehub.com || true &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 120"
    environment:
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      DB_ENGINE: "django.db.backends.postgresql"
      DB_NAME: ${DB_NAME:-servicehub}
      DB_USER: ${DB_USER:-servicehub}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres
      DB_PORT: "5432"
      REDIS_URL: "redis://redis:6379/0"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      DJANGO_LOG_LEVEL: ${DJANGO_LOG_LEVEL:-INFO}
      EMAIL_BACKEND: ${EMAIL_BACKEND:-django.core.mail.backends.smtp.EmailBackend}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL:-noreply@servicehub.com.br}
      SERVER_EMAIL: ${SERVER_EMAIL:-server@servicehub.com.br}
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/schema/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - servicehub_network

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: servicehub_celery_prod
    command: celery -A config worker -l info --concurrency=2
    environment:
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      DB_ENGINE: "django.db.backends.postgresql"
      DB_NAME: ${DB_NAME:-servicehub}
      DB_USER: ${DB_USER:-servicehub}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres
      DB_PORT: "5432"
      REDIS_URL: "redis://redis:6379/0"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
    depends_on:
      - postgres
      - redis
      - backend
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - servicehub_network

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: servicehub_celery_beat_prod
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      DB_ENGINE: "django.db.backends.postgresql"
      DB_NAME: ${DB_NAME:-servicehub}
      DB_USER: ${DB_USER:-servicehub}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres
      DB_PORT: "5432"
      REDIS_URL: "redis://redis:6379/0"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
    depends_on:
      - postgres
      - redis
      - backend
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - servicehub_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: servicehub_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - servicehub_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  servicehub_network:
    driver: bridge