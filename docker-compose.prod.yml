services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: servicehub-db
    environment:
      POSTGRES_DB: ${DB_NAME:-servicehub}
      POSTGRES_USER: ${DB_USER:-servicehub}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_HOST_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-servicehub}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - servicehub-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: servicehub-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_HOST_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - servicehub-network
    restart: unless-stopped

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: servicehub-backend
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 120"
    environment:
      DEBUG: "False"
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      SECRET_KEY: ${SECRET_KEY:-change-me-in-production}
      DATABASE_URL: postgresql://${DB_USER:-servicehub}:${DB_PASSWORD:-changeme}@db:5432/${DB_NAME:-servicehub}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "${BACKEND_HOST_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - servicehub-network
    restart: unless-stopped

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: servicehub-celery
    command: celery -A config worker -l info
    environment:
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY:-change-me-in-production}
      DATABASE_URL: postgresql://${DB_USER:-servicehub}:${DB_PASSWORD:-changeme}@db:5432/${DB_NAME:-servicehub}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
      - backend
    networks:
      - servicehub-network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: servicehub-celery-beat
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY:-change-me-in-production}
      DATABASE_URL: postgresql://${DB_USER:-servicehub}:${DB_PASSWORD:-changeme}@db:5432/${DB_NAME:-servicehub}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
      - backend
    networks:
      - servicehub-network
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000/api/v1}
    container_name: servicehub-frontend
    ports:
      - "${FRONTEND_HOST_PORT:-3000}:80"
    depends_on:
      - backend
    networks:
      - servicehub-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: servicehub-nginx
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    depends_on:
      - backend
      - frontend
    networks:
      - servicehub-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  servicehub-network:
    driver: bridge

